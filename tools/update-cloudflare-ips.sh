#!/usr/bin/env bash
# tools/update-cloudflare-ips.sh - Cloudflare IP ranges updater

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Load libraries
for lib in logging system validation; do
  lib_file="$ROOT_DIR/lib/${lib}.sh"
  if [[ -f "$lib_file" ]]; then
    # shellcheck source=/dev/null
    source "$lib_file"
  else
    echo "ERROR: Required library not found: $lib_file" >&2
    exit 1
  fi
done

_set_log_prefix "cloudflare-ips"

readonly CF_IPV4_URL="https://www.cloudflare.com/ips-v4"
readonly CF_IPV6_URL="https://www.cloudflare.com/ips-v6"
readonly CADDY_IP_FILE="$ROOT_DIR/caddy/cloudflare-ips.caddy"
readonly BACKUP_SUFFIX=".backup.$(date +%Y%m%d_%H%M%S)"

QUIET=false
FORCE=false
DRY_RUN=false

usage() {
  cat <<USAGE
Usage: $(basename "$0") [--quiet|-q] [--force|-f] [--dry-run|-n]
Fetch Cloudflare IPv4/IPv6 CIDR ranges and update Caddy allowlists.
USAGE
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --quiet|-q) QUIET=true; shift ;;
    --force|-f) FORCE=true; shift ;;
    --dry-run|-n) DRY_RUN=true; shift ;;
    --help|-h) usage; exit 0 ;;
    *) _log_warning "Unknown argument: $1"; usage; exit 1 ;;
  esac
done

_fetch_cloudflare_ips_with_retry() {
    local url="$1"; local ip_type="$2"
    local max_retries=3
    local retry_delay=5

    for ((i=1; i<=max_retries; i++)); do
        _log_debug "Fetching $ip_type ranges (attempt $i/$max_retries): $url"
        if ips="$(curl -fsSL --connect-timeout 10 "$url" 2>/dev/null)"; then
            if [[ -n "$ips" ]] && echo "$ips" | awk 'NF' | grep -Eq '^[0-9a-fA-F:.\/]+$'; then
                echo "$ips"
                return 0
            else
                _log_warning "Invalid response from $url"
            fi
        fi
        if [[ $i -lt $max_retries ]]; then
            _log_warning "Cloudflare IP fetch failed, retrying in ${retry_delay}s..."
            sleep "$retry_delay"
        fi
    done

    _log_error "Failed to fetch $ip_type IPs after $max_retries attempts"
    return 1
}

_generate_caddy_config() {
  local ipv4_ranges="$1"; local ipv6_ranges="$2"
  cat <<CADDY
# Generated by update-cloudflare-ips.sh on $(date -u)
# IPv4 ranges
@cloudflare {
  remote_ip $(echo "$ipv4_ranges" | awk 'NF' | sort -u | tr '\n' ' ')
  remote_ip $(echo "$ipv6_ranges" | awk 'NF' | sort -u | tr '\n' ' ')
}
CADDY
}

_needs_update() {
  local target_file="$1"; local new_content="$2"
  if [[ "$FORCE" == "true" ]]; then return 0; fi
  if [[ ! -f "$target_file" ]]; then return 0; fi
  local existing current
  existing="$(grep '^  remote_ip ' "$target_file" 2>/dev/null | sort || true)"
  current="$(echo "$new_content" | grep '^  remote_ip ' | sort || true)"
  [[ "$existing" != "$current" ]]
}

_update_config_file() {
  local target_file="$1"; local new_content="$2"
  local target_dir; target_dir="$(dirname "$target_file")"
  [[ -d "$target_dir" ]] || {
    if [[ "$DRY_RUN" == "true" ]]; then
      _log_info "[DRY RUN] Would create directory: $target_dir"
    else
      mkdir -p "$target_dir"; _log_debug "Created directory: $target_dir"
    fi
  }
  if ! _needs_update "$target_file" "$new_content"; then
    _log_debug "No update needed for $target_file"
    return 1
  fi
  if [[ "$DRY_RUN" == "true" ]]; then
    _log_info "[DRY RUN] Would update: $target_file"
    return 0
  fi
  if [[ -f "$target_file" ]]; then
    _backup_file "$target_file" "$BACKUP_SUFFIX" || _log_warning "Failed to create backup for $target_file"
  fi
  local tmp; tmp="$(mktemp)"
  printf '%s\n' "$new_content" > "$tmp"
  mv -f "$tmp" "$target_file"
  chmod 644 "$target_file"
  _log_success "Updated: $target_file"
  return 0
}

_reload_caddy_config() {
    if [[ "$DRY_RUN" == "true" ]]; then
        _log_info "[DRY RUN] Would check and reload Caddy if running."
        return 0
    fi

    if _compose_service_running "caddy"; then
        _log_info "Caddy is running, reloading configuration to apply IP updates..."
        if docker compose exec caddy caddy reload --config /etc/caddy/Caddyfile >/dev/null 2>&1; then
            _log_success "Caddy configuration reloaded successfully."
        else
            _log_error "Failed to reload Caddy configuration."
        fi
    else
        _log_debug "Caddy service not running, skipping reload."
    fi
}

_update_cloudflare_ips() {
  _log_info "Updating Cloudflare IP ranges..."
  if ! _have_cmd curl; then
    _log_error "curl command not found. Please install curl."
    return 1
  fi
  if ! _test_connectivity "8.8.8.8" 5; then
    _log_error "No network connectivity detected"
    return 1
  fi

  _log_debug "Fetching Cloudflare IP ranges..."
  local ipv4_ranges ipv6_ranges
  ipv4_ranges="$(_fetch_cloudflare_ips_with_retry "$CF_IPV4_URL" "IPv4")" || { _log_error "Failed to fetch IPv4 ranges"; return 1; }
  ipv6_ranges="$(_fetch_cloudflare_ips_with_retry "$CF_IPV6_URL" "IPv6")" || { _log_error "Failed to fetch IPv6 ranges"; return 1; }

  local ipv4_count ipv6_count
  ipv4_count="$(echo "$ipv4_ranges" | awk 'NF' | wc -l | tr -d ' ')"
  ipv6_count="$(echo "$ipv6_ranges" | awk 'NF' | wc -l | tr -d ' ')"
  _log_debug "Fetched $ipv4_count IPv4 ranges and $ipv6_count IPv6 ranges"

  if [[ ${ipv4_count:-0} -lt 5 || ${ipv6_count:-0} -lt 5 ]]; then
    _log_error "Suspiciously few IP ranges fetched (IPv4: $ipv4_count, IPv6: $ipv6_count)"
    return 1
  fi

  local caddy_config updated=false
  caddy_config="$(_generate_caddy_config "$ipv4_ranges" "$ipv6_ranges")"

  if _update_config_file "$CADDY_IP_FILE" "$caddy_config"; then
      updated=true
  fi

  if [[ "$updated" == "true" ]]; then
    _log_success "Cloudflare IP ranges updated successfully"
    _log_info "IPv4 ranges: $ipv4_count"
    _log_info "IPv6 ranges: $ipv6_count"
    _reload_caddy_config
    return 0
  else
    _log_info "Cloudflare IP ranges are already up to date."
    return 0
  fi
}

if _update_cloudflare_ips; then
  exit 0
else
  exit 1
fi